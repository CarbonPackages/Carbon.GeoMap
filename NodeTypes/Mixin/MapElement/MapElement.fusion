prototype(Carbon.GeoMap:Mixin.MapElement) < prototype(Neos.Neos:ContentComponent) {
    # This needs to defined
    type = null

    addresses = ${q(node).children('[instanceof Carbon.GeoMap:Mixin.Address]') || []}

    zoom = ${q(node).property('zoom')}

    renderer = Neos.Fusion:Component {
        @apply.props = ${props}
        coordinates = Neos.Fusion:Map {
            items = ${props.addresses}
            itemRenderer = ${q(item).property('location')}
            @process.filter = ${Array.filter(value)}
        }
        content = Neos.Neos:ContentCollectionRenderer

        renderer = Neos.Fusion:Case {
            noType {
                condition = ${!props.type}
                renderer = Carbon.Notification:Backend {
                    content = ${Carbon.Backend.translate('noType', 'The prototype for the rendering is not defined', [], 'Main', 'Carbon.GeoMap')}
                }
            }
            wrongType {
                condition = Neos.Fusion:CanRender {
                    type = ${props.type}
                    @process.negate = ${!value}
                }
                renderer = Carbon.Notification:Backend {
                    content = ${Carbon.Backend.translate('wrongType', 'The prottype <code>{0}</code> could not be found', [props.type], 'Main', 'Carbon.GeoMap')}
                }
            }
            noCoordinates {
                condition = ${!Carbon.Array.length(props.coordinates)}
                renderer = Carbon.Notification:Backend {
                    content = ${Carbon.Backend.translate('noAddress', 'No address has been created yet', [], 'Main', 'Carbon.GeoMap')}
                }
            }
            default {
                condition = true
                renderer = Neos.Fusion:Renderer {
                    type = ${props.type}
                    element.@apply.data = ${props}
                }
            }
        }
    }

    @context.type = ${this.type}
    @cache {
        mode = 'cached'
        entryIdentifier {
            collection = ${node}
            type = ${type}
        }
        entryTags {
            1 = ${Neos.Caching.nodeTag(node)}
            2 = ${Neos.Caching.descendantOfTag(node)}
        }
        maximumLifetime = ${q(node).context({'invisibleContentShown': true}).children().cacheLifetime()}
    }

    @exceptionHandler = 'Neos\\Neos\\Fusion\\ExceptionHandlers\\NodeWrappingHandler'
}
